#!/usr/bin/env node

/**
 * Google Client Secret Setup Helper
 * This script helps you configure your Google OAuth Client Secret
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('\nüîê Google Client Secret Setup\n');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

console.log('This will help you configure Google OAuth for token refresh.\n');

console.log('üìã Step 1: Get your Client Secret\n');
console.log('1. Go to: https://console.cloud.google.com/apis/credentials');
console.log('2. Find your OAuth 2.0 Client ID:');
console.log('   929271330787-chktjtd81grj1sb4nae2b11tevocmfh9.apps.googleusercontent.com');
console.log('3. Click on it to view details');
console.log('4. Copy the "Client secret" value (starts with GOCSPX-)\n');

rl.question('üìù Paste your Client Secret here: ', (clientSecret) => {
  if (!clientSecret || clientSecret.trim() === '') {
    console.log('\n‚ùå Error: Client secret cannot be empty');
    console.log('Please run this script again with your actual client secret.\n');
    rl.close();
    return;
  }

  const trimmedSecret = clientSecret.trim();

  // Validate format (Google client secrets typically start with GOCSPX-)
  if (!trimmedSecret.startsWith('GOCSPX-')) {
    console.log('\n‚ö†Ô∏è  Warning: Client secret should start with "GOCSPX-"');
    console.log('Are you sure this is correct? The secret you entered:');
    console.log(`   ${trimmedSecret.substring(0, 20)}...`);
    
    rl.question('\nContinue anyway? (y/n): ', (answer) => {
      if (answer.toLowerCase() !== 'y') {
        console.log('\n‚ùå Setup cancelled. Please run again with correct secret.\n');
        rl.close();
        return;
      }
      
      createEnvFile(trimmedSecret);
      rl.close();
    });
  } else {
    createEnvFile(trimmedSecret);
    rl.close();
  }
});

function createEnvFile(clientSecret) {
  const envPath = path.join(process.cwd(), '.env');
  
  const envContent = `# Google OAuth Configuration
# Generated by setup-google-secret.js on ${new Date().toISOString()}

# Google OAuth Client ID
GOOGLE_CLIENT_ID=929271330787-chktjtd81grj1sb4nae2b11tevocmfh9.apps.googleusercontent.com

# Google OAuth Client Secret (REQUIRED for token refresh)
GOOGLE_CLIENT_SECRET=${clientSecret}

# Google Redirect URI
GOOGLE_REDIRECT_URI=https://meetingguard-backend.onrender.com/oauth/google
GOOGLE_REDIRECT_URI_SCHEME=meetingguard

# Expo Public Variables (accessible in React Native app)
EXPO_PUBLIC_GOOGLE_CLIENT_ID=929271330787-chktjtd81grj1sb4nae2b11tevocmfh9.apps.googleusercontent.com
EXPO_PUBLIC_GOOGLE_CLIENT_SECRET=${clientSecret}
EXPO_PUBLIC_BACKEND_URL=http://localhost:3000

# Backend URL
BACKEND_URL=http://localhost:3000
`;

  // Check if .env already exists
  if (fs.existsSync(envPath)) {
    console.log('\n‚ö†Ô∏è  .env file already exists!');
    
    rl.question('Overwrite it? (y/n): ', (answer) => {
      if (answer.toLowerCase() === 'y') {
        // Backup existing .env
        const backupPath = path.join(process.cwd(), `.env.backup.${Date.now()}`);
        fs.copyFileSync(envPath, backupPath);
        console.log(`\nüíæ Backed up existing .env to: ${path.basename(backupPath)}`);
        
        // Write new .env
        fs.writeFileSync(envPath, envContent);
        console.log('\n‚úÖ .env file created successfully!\n');
        printNextSteps();
      } else {
        console.log('\n‚ùå Setup cancelled. Existing .env file not modified.\n');
      }
    });
  } else {
    // Create new .env file
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ .env file created successfully!\n');
    printNextSteps();
  }
}

function printNextSteps() {
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  console.log('üéâ Setup Complete!\n');
  console.log('üìã Next Steps:\n');
  console.log('1. Install dependencies (if not already installed):');
  console.log('   npm install react-native-dotenv\n');
  console.log('2. Clear Metro cache and restart:');
  console.log('   npx expo start --clear\n');
  console.log('3. Reload your app (press "r" in Metro terminal)\n');
  console.log('4. Sign in with Google\n');
  console.log('5. Check console logs for:');
  console.log('   ‚úÖ [TokenManager] Client secret available: true\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  console.log('üîí Security Reminder:\n');
  console.log('- NEVER commit .env to Git!');
  console.log('- .env should be in your .gitignore');
  console.log('- Keep your client secret private!\n');
  console.log('üìñ For more help, see: GOOGLE_TOKEN_REFRESH_FIX.md\n');
}

// Handle Ctrl+C
rl.on('SIGINT', () => {
  console.log('\n\n‚ùå Setup cancelled by user.\n');
  process.exit(0);
});
